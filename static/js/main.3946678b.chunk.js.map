{"version":3,"sources":["components/menu/NavItem/NavItem.js","components/menu/Menu.js","constants/constant.js","components/table/RowItem/RowItem.js","components/table/RowTitle/RowTitle.js","state/actions/action.type.js","components/table/table.jsx","components/DropSelect/DropSelect.js","state/actions/table.action.js","App.js","serviceWorker.js","state/reducers/data-currency.js","state/reducers/currency.js","state/reducers/val-currency.js","state/reducers/index.js","services/config.services.js","services/table.services.js","state/sagas/sagas.js","state/store/store.js","index.js","assets/img/coingecko-logo-d13d6bcceddbb003f146b33c2f7e8193d72b93bb343d38e392897c3df3e78bdd.webp"],"names":["NavItem","props","className","children","menu","src","logo","alt","type","placeholder","PERCENT_1H","PERCENT_24H","PERCENT_7D","RowItem","item","formatter","Intl","NumberFormat","style","currency","itemCurrency","minimumFractionDigits","percent_1h","parseFloat","KEY","toFixed","percent_24h","percent_7d","arrItem","format","isNaN","RowTitle","arr2","listHeader","map","index","key","onClick","changeData","actions","GET_DATA","GET_DATA_SUCCESS","GET_DATA_CURRENCY","GET_DATA_CURRENCY_SUCCESS","GET_VAL_CURRENCY","GET_VAL_CURRENCY_SUCCESS","SHOW_LOADER","HIDE_LOADER","React","memo","dataList","listData","useSelector","state","loading","useState","order","dispatch","useDispatch","useEffect","Actions","payload","query","error","spinner","size","handlerData","DropSelect","dataListCurrency","data","arr","value","onChange","e","persist","target","App","dataCurrency","valCurrency","setState","vs_currency","per_page","page","sparkline","price_change_percentage","Menu","console","log","Boolean","window","location","hostname","match","initialState","action","rootReducer","combineReducers","CurrencyReducer","dataCurrencyReducer","valCurrencyReducer","axiosClient","axios","create","baseURL","headers","paramsSerializer","params","m","join","newParam","queryString","stringify","encode","interceptors","response","use","TableService","get","fetchUser","fetchCurrency","fetchChangeValCurrency","mySaga","rootSaga","call","list","user","put","message","listCurrency","takeLatest","all","sagaMiddleware","createSagaMiddleware","storeApp","configureStore","reducer","middleware","run","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.3946678b.chunk.js","sourcesContent":["// eslint-disable-next-line no-unused-vars\r\nimport React from 'react';\r\n\r\nconst NavItem = (props) => {\r\n    return (\r\n        <li className=\"list-item\"> {props.children} </li>\r\n    );\r\n};\r\n\r\nexport default NavItem;\r\n","import React from 'react';\r\nimport logo from '../../assets/img/coingecko-logo-d13d6bcceddbb003f146b33c2f7e8193d72b93bb343d38e392897c3df3e78bdd.webp';\r\nimport NavItem from './NavItem/NavItem'; \r\nconst menu = () => {\r\n    return (\r\n      <div className=\"menu\"> \r\n           <div className=\"logo\">\r\n             <img src={logo} alt=\"props\"/>\r\n           </div>\r\n           <ul className=\"nav\">\r\n                <NavItem>Home</NavItem>\r\n                <NavItem>Markets</NavItem>\r\n                <NavItem>Defi</NavItem>\r\n                <NavItem>Exchanges</NavItem>\r\n                <NavItem>News</NavItem>\r\n                <NavItem>Tools</NavItem>\r\n                <NavItem>Resources</NavItem>\r\n                <NavItem>Learn</NavItem>\r\n                <NavItem>Community</NavItem>\r\n            </ul>\r\n            <input className=\"search\" type=\"text\" placeholder=\"Search ...\"/>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default menu;\r\n","export const BASE_URL = 'https://api.coingecko.com/api/v3';\r\n\r\n// key of table\r\n\r\nexport const MARKET_RANK = 'market_cap_rank';\r\nexport const IMAGE = 'image';\r\nexport const SYMBOL = 'symbol';\r\nexport const PRICE = 'current_price';\r\nexport const PERCENT_1H = 'price_change_percentage_1h_in_currency';\r\nexport const PERCENT_24H = 'price_change_percentage_24h_in_currency';\r\nexport const PERCENT_7D = 'price_change_percentage_7d_in_currency';\r\nexport const PER_1h = '1h%2C';\r\nexport const PER_24h = '24h%2C';\r\nexport const PER_7d = '7d';\r\nexport const VOLUME = 'total_volume';\r\nexport const MKT_CAP = 'market_cap';\r\n// sort \r\nexport const MARKET_CAP_DESC = 'market_cap_desc';\r\nexport const VOLUME_DESC = 'volume_desc';\r\nexport const VOLUME_ASC = 'volume_asc';\r\nexport const GECKO_DESC = 'gecko_desc';\r\nexport const GECKO_ASC = 'gecko_asc';\r\nexport const MARKET_CAP_ASC = 'market_cap_asc';\r\n\r\n\r\n\r\n","// eslint-disable-next-line no-unused-vars\r\nimport React, { useEffect } from 'react';\r\nimport * as KEY from '../../../constants/constant';\r\nconst RowItem = (props) => {\r\n  const { item } = props;\r\n\r\n\r\n  const formatter = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: props.itemCurrency,\r\n    minimumFractionDigits: 0\r\n  });\r\n\r\n  let percent_1h = parseFloat(item[KEY.PERCENT_1H]).toFixed(2);\r\n  let percent_24h = parseFloat(item[KEY.PERCENT_24H]).toFixed(2);\r\n  let percent_7d = parseFloat(item[KEY.PERCENT_7D]).toFixed(2);\r\n\r\n  const arrItem = (\r\n    <>\r\n      <td className=\"item star\"><span><i className=\"far fa-star\"></i></span> {item[KEY.MARKET_RANK]}</td>\r\n\r\n      <td className=\"item logo\"> <div className=\"item-small\"> <img src={item[KEY.IMAGE]} /> <h3>{item['name']}</h3></div> <h5 className=\"upcase\">{item[KEY.SYMBOL]}</h5> </td>\r\n      <td className=\"item\">{formatter.format(item[KEY.PRICE])}</td>\r\n      {item[KEY.PERCENT_1H] > 0 ?\r\n        <td className=\"item green-num\">{percent_1h}%</td>\r\n        :\r\n        <td className=\"item red-num\">{isNaN(percent_1h) ? `--` : `${percent_1h}%`}</td>\r\n      }\r\n      {item[KEY.PERCENT_24H] > 0 ?\r\n        <td className=\"item green-num\">{percent_24h}%</td>\r\n        :\r\n        <td className=\"item red-num\">{isNaN(percent_24h) ? `--` : `${percent_24h}%`}</td>\r\n      }\r\n      {item[KEY.PERCENT_7D] > 0 ?\r\n        <td className=\"item green-num\">{percent_7d}%</td>\r\n        :\r\n        <td className=\"item red-num\">{isNaN(percent_7d) ? `--` : `${percent_7d}%`}</td>\r\n      }\r\n      <td className=\"item\">{formatter.format(item[KEY.VOLUME])}</td>\r\n      <td className=\"item\">{formatter.format(item[KEY.MKT_CAP])}</td>\r\n    </>\r\n  );\r\n  return (\r\n\r\n    <tr className=\"list-row-item\">\r\n      {arrItem}\r\n    </tr>\r\n\r\n  );\r\n};\r\n\r\nexport default RowItem;\r\n","// eslint-disable-next-line no-unused-vars\r\nimport React, { useEffect } from 'react';\r\nimport { MARKET_CAP_DESC, VOLUME_ASC, VOLUME_DESC, GECKO_ASC, GECKO_DESC } from '../../../constants/constant';\r\n\r\nconst RowTitle = (props) => {\r\n\r\n  // const dispatch = useDispatch();\r\n\r\n  let arr = [\r\n    '#', 'Coin', 'Price',\r\n    '1h', '24h', '7d', '24h Volume',\r\n    'Mkt Cap'\r\n  ];\r\n\r\n  let arr2 = [\r\n    '', '', '',\r\n    '', '', '',\r\n    VOLUME_DESC, MARKET_CAP_DESC\r\n  ];\r\n\r\n  let listHeader = arr.map((item, index) => (\r\n    <td key={index} className=\"item-header\" onClick={() => props.changeData(arr2[index])}>\r\n      {item} <span className=\"drop-down\"><i className=\"fas fa-caret-down\"></i></span>\r\n    </td>\r\n  ));\r\n\r\n  return (\r\n    <thead className=\"list-row-item listHeader\">\r\n      {listHeader}\r\n    </thead>\r\n  );\r\n};\r\n\r\nexport default RowTitle;\r\n","const actions = {\r\n  GET_DATA: 'GET_DATA',\r\n  GET_DATA_SUCCESS: 'GET_DATA_SUCCESS',\r\n  GET_DATA_CURRENCY: 'GET_DATA_CURRENCY',\r\n  GET_DATA_CURRENCY_SUCCESS: 'GET_DATA_CURRENCY_SUCCESS',\r\n  GET_VAL_CURRENCY: 'GET_VAL_CURRENCY',\r\n  GET_VAL_CURRENCY_SUCCESS: 'GET_VAL_CURRENCY_SUCCESS',\r\n  SHOW_LOADER: 'SHOW_LOADER',\r\n  HIDE_LOADER: 'HIDE_LOADER'\r\n};\r\nexport default actions;\r\n\r\n","// eslint-disable-next-line no-unused-vars\r\nimport React, { useEffect, useState } from 'react';\r\n// eslint-disable-next-line no-unused-vars\r\nimport RowItem from './RowItem/RowItem';\r\n// eslint-disable-next-line no-unused-vars\r\nimport { Spin, Space } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// eslint-disable-next-line no-unused-vars\r\nimport RowTitle from './RowTitle/RowTitle';\r\nimport { Actions } from '../../state/actions';\r\nfunction Table(props) {\r\n\r\n\r\n  const { dataList } = props;\r\n  let listData = null;\r\n  const loadingCurency = useSelector(state => state.currency.loading);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  if (dataList) {\r\n    listData = dataList.map((item, index) =>\r\n      (\r\n        <RowItem itemCurrency={props.currency} key={index} item={item} order={index + 1} />\r\n      )\r\n    );\r\n  }\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    try {\r\n      dispatch({ type: Actions.GET_DATA, payload: props.query });\r\n    } catch (error) {\r\n    }\r\n    return () => {\r\n      // setLoading(true);\r\n    };\r\n\r\n  }, [props.currency, props.order]);\r\n\r\n  // SPINNER LOADING\r\n  const spinner = (\r\n    <Space size=\"middle\">\r\n      <Spin size=\"large\" />\r\n    </Space>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n\r\n      {dataList ?\r\n        <table>\r\n          <RowTitle changeData={props.handlerData} />\r\n          {loading ? spinner : listData}\r\n        </table>\r\n        :\r\n        spinner\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default React.memo(Table);\r\n","// eslint-disable-next-line no-unused-vars\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Actions } from '../../state/actions';\r\nimport { getValCurrency } from '../../state/actions/table.action';\r\n\r\nconst DropSelect = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const dataListCurrency = useSelector(state => state.currency.data);\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: Actions.GET_DATA_CURRENCY });\r\n  }, []);\r\n\r\n  let arr = [];\r\n  if (dataListCurrency) {\r\n    arr = dataListCurrency.map(item => (<option value={item} key={item}>{item}</option>));\r\n  }\r\n\r\n  return (\r\n    <select className=\"drop-select\"\r\n      onChange={(e) => {\r\n        e.persist();\r\n        dispatch(getValCurrency(e.target.value));\r\n      }}\r\n    >\r\n      {\r\n        dataListCurrency ?\r\n          arr\r\n          :\r\n          null\r\n      }\r\n    </select >\r\n  );\r\n};\r\n\r\nexport default DropSelect;\r\n","import Actions from './action.type';\r\n\r\n\r\nexport const getData = (payload) => ({\r\n  type: Actions.GET_DATA,\r\n  payload\r\n});\r\n\r\nexport const getDataSuccess = (payload) => ({\r\n  type: Actions.GET_DATA_SUCCESS,\r\n  payload,\r\n});\r\nexport const getDataCurrency = () => ({\r\n  type: Actions.GET_DATA_CURRENCY\r\n});\r\n\r\nexport const getDataCurrencySuccess = (payload) => ({\r\n  type: Actions.GET_DATA_CURRENCY_SUCCESS,\r\n  payload\r\n});\r\nexport const getValCurrency = (payload) => ({\r\n  type: Actions.GET_VAL_CURRENCY,\r\n  payload\r\n});\r\nexport const getValCurrencySuccess = (payload) => ({\r\n  type: Actions.GET_VAL_CURRENCY_SUCCESS,\r\n  payload\r\n});\r\n\r\n","// eslint-disable-next-line no-unused-vars\r\nimport React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport './assets/css/main.css';\r\nimport 'antd/dist/antd.css';\r\n// eslint-disable-next-line no-unused-vars\r\nimport Menu from './components/menu/Menu';\r\n// eslint-disable-next-line no-unused-vars\r\nimport Table from '../src/components/table/table';\r\nimport { useSelector } from 'react-redux';\r\n// eslint-disable-next-line no-unused-vars\r\nimport { Spin, Space } from 'antd';\r\n// eslint-disable-next-line no-unused-vars\r\nimport DropSelect from './components/DropSelect/DropSelect';\r\nimport { PER_1h, PER_24h, PER_7d } from './constants/constant';\r\n\r\nfunction App() {\r\n\r\n  const dataList = useSelector(state => state.dataCurrency.data);\r\n  const valCurrency = useSelector(state => state.valCurrency.data);\r\n\r\n  const [state, setState] = useState('market_cap_desc');\r\n  const query = {\r\n    vs_currency: valCurrency,\r\n    order: state,\r\n    per_page: 100,\r\n    page: 1,\r\n    sparkline: false,\r\n    price_change_percentage: [PER_1h, PER_24h, PER_7d]\r\n  };\r\n\r\n  // E truyền vào query rồi lấy ra data \r\n  // RỒi ktra nếu 2 cái bị thay đổi thì sẽ call lại data \r\n\r\n  const handlerDataChange = (e) => {\r\n    console.log('HELO');\r\n    setState(e);\r\n  };\r\n  // SPINNER LOADING\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Menu />\r\n      <h1 className=\"title\">Top 100 Coins by Market Capitalization</h1>\r\n      <div className=\"container\">\r\n        <DropSelect />\r\n\r\n        <Table\r\n          order={state}\r\n          handlerData={handlerDataChange}\r\n          dataList={dataList} currency={valCurrency}\r\n          query={query} />\r\n\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nimport { Actions } from '../actions';\r\nconst initialState = {\r\n  data: null,\r\n  loading: false\r\n};\r\n\r\nconst dataCurrency = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case Actions.GET_DATA_SUCCESS: {\r\n      const { payload: data } = action;\r\n      return {\r\n        ...state,\r\n        data,\r\n        loading: false\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n\r\n\r\n};\r\n\r\nexport default dataCurrency;\r\n","\r\nimport { Actions } from '../actions';\r\nconst initialState = {\r\n  data: null\r\n};\r\nconst currency = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n    case Actions.SHOW_LOADER:\r\n      return {\r\n        ...state\r\n      };\r\n\r\n    case Actions.GET_DATA_CURRENCY_SUCCESS: {\r\n      const { payload: data } = action;\r\n      return {\r\n        ...state,\r\n        data\r\n      };\r\n    }\r\n\r\n    case Actions.HIDE_LOADER:\r\n      return {\r\n        ...state,\r\n        loading: false\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default currency;\r\n","\r\nimport { Actions } from '../actions';\r\nconst initialState = {\r\n    data: 'btc'\r\n};\r\n\r\nconst valCurrency = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case Actions.GET_VAL_CURRENCY_SUCCESS: {\r\n            const { payload: data } = action;\r\n            return {\r\n                ...state,\r\n                data\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default valCurrency;\r\n","import { combineReducers } from 'redux';\r\nimport dataCurrencyReducer from './data-currency';\r\nimport CurrencyReducer from './currency';\r\nimport valCurrencyReducer from './val-currency';\r\n\r\n// Combine reducer\r\nconst rootReducer = combineReducers({\r\n    currency: CurrencyReducer,\r\n    dataCurrency: dataCurrencyReducer,\r\n    valCurrency: valCurrencyReducer\r\n});\r\n\r\nexport default rootReducer; ","import * as URLS from '../constants/constant';\r\nimport axios from 'axios';\r\nimport queryString from 'query-string';\r\n\r\nconst axiosClient = axios.create({\r\n    baseURL: URLS.BASE_URL,\r\n    headers: {\r\n        'content-type': 'application/json'\r\n    },\r\n    paramsSerializer: params => {\r\n        const m = params.price_change_percentage.join('');\r\n        const newParam = { ...params, price_change_percentage: m };\r\n        return queryString.stringify(newParam, {\r\n            encode: false\r\n        });\r\n    },\r\n});\r\naxiosClient.interceptors.response.use((response) => {\r\n    if (response && response.data) {\r\n        return response.data;\r\n    }\r\n    return response;\r\n}, (error) => {\r\n    throw error;\r\n});\r\nexport default axiosClient;","import axiosClient from './config.services';\r\n\r\nclass TableService {\r\n\r\n  static list(query) {\r\n    // return fetchData(query);\r\n    const url = '/coins/markets';\r\n    return axiosClient.get(url, { params: query });\r\n  }\r\n  static listCurrency() {\r\n    const url = '/simple/supported_vs_currencies';\r\n    return axiosClient.get(url);\r\n  }\r\n\r\n}\r\nexport default TableService;\r\n","import { call, put, takeLatest, all } from 'redux-saga/effects';\r\nimport { Actions, getDataCurrencySuccess, getValCurrencySuccess } from '../actions';\r\nimport TableService from '../../services/table.services';\r\n// worker Saga: will be fired on USER_FETCH_REQUESTED actions\r\nfunction* fetchUser(action) {\r\n  try {\r\n    const user = yield call(TableService.list, action.payload);\r\n\r\n    yield put({ type: Actions.GET_DATA_SUCCESS, payload: user });\r\n\r\n  } catch (e) {\r\n    yield put({ type: \"USER_FETCH_FAILED\", message: e.message });\r\n  }\r\n\r\n}\r\n\r\nfunction* fetchCurrency() {\r\n  try {\r\n\r\n    const list = yield call(TableService.listCurrency);\r\n    yield put(getDataCurrencySuccess(list));\r\n  } catch (e) {\r\n    yield put({ type: \"USER_FETCH_FAILED\", message: e.message });\r\n  }\r\n}\r\n\r\nfunction* fetchChangeValCurrency(action) {\r\n  try {\r\n    yield put(getValCurrencySuccess(action.payload));\r\n  } catch (e) {\r\n    yield put({ type: \"USER_FETCH_FAILED\", message: e.message });\r\n  }\r\n}\r\n\r\nfunction* mySaga() {\r\n  yield takeLatest(Actions.GET_DATA, fetchUser);\r\n  yield takeLatest(Actions.GET_DATA_CURRENCY, fetchCurrency);\r\n  yield takeLatest(Actions.GET_VAL_CURRENCY, fetchChangeValCurrency);\r\n\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([mySaga()]);\r\n}","// eslint-disable-next-line no-unused-vars\r\nimport React from 'react';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from 'redux-saga';\r\n// eslint-disable-next-line no-unused-vars\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from '../reducers/index';\r\nimport rootSaga from '../sagas/sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst storeApp = configureStore(\r\n  {\r\n    reducer: rootReducer,\r\n    middleware: [sagaMiddleware]\r\n  }\r\n);\r\nconst store = (props) => {\r\n  return (\r\n    <Provider store={storeApp}>\r\n      {props.children}\r\n    </Provider>\r\n  );;\r\n};\r\nsagaMiddleware.run(rootSaga);\r\nexport default store;\r\n","// eslint-disable-next-line no-unused-vars\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// eslint-disable-next-line no-unused-vars\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// eslint-disable-next-line no-unused-vars\r\nimport Store from './state/store/store';\r\n\r\nReactDOM.render(\r\n\r\n  <Store>\r\n    <App />\r\n  </Store>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/coingecko-logo-d13d6bcceddbb003f146b33c2f7e8193d72b93bb343d38e392897c3df3e78bdd.dd5ea50b.webp\";"],"sourceRoot":""}